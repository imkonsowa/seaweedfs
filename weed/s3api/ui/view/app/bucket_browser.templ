package app

import (
	"fmt"
	"github.com/seaweedfs/seaweedfs/weed/s3api/ui/view/data"
	"path"
	"strings"
)

templ BucketBrowser(data data.BucketBrowserData) {
	<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
		<div>
			<h1 class="h2">
				<i class="fas fa-cube me-2"></i>{ data.BucketName }
			</h1>
			<nav aria-label="breadcrumb">
				<ol class="breadcrumb">
					<li class="breadcrumb-item">
						<a href="/ui/buckets" class="text-decoration-none">
							<i class="fas fa-cube me-1"></i>Buckets
						</a>
					</li>
					<li class="breadcrumb-item">
						<a href={ templ.URL(fmt.Sprintf("/ui/buckets/%s", data.BucketName)) } class="text-decoration-none">
							{ data.BucketName }
						</a>
					</li>
					if data.CurrentPath != "" {
						for _, segment := range strings.Split(data.CurrentPath, "/") {
							if segment != "" {
								<li class="breadcrumb-item">
									<a href={ templ.URL(fmt.Sprintf("/ui/buckets/%s?path=%s", data.BucketName, path.Join(data.CurrentPath[:strings.LastIndex(data.CurrentPath, segment)], segment))) } class="text-decoration-none">
										{ segment }
									</a>
								</li>
							}
						}
					}
				</ol>
			</nav>
		</div>
		<div class="btn-toolbar mb-2 mb-md-0">
			<div class="btn-group me-2">
				<button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#uploadModal">
					<i class="fas fa-cloud-upload-alt me-1"></i>Upload
				</button>
				<button type="button" class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#createFolderModal">
					<i class="fas fa-folder-plus me-1"></i>New Folder
				</button>
				<button type="button" class="btn btn-sm btn-outline-secondary" onclick="htmx.ajax('GET', window.location.pathname + window.location.search, {target: '.file-browser-card', swap: 'outerHTML', headers: {'HX-Request': 'true'}})">
					<i class="fas fa-sync-alt me-1"></i>Refresh
				</button>
			</div>
		</div>
	</div>
	<!-- Drag and Drop Upload Zone -->
	<div id="dropZone" class="drop-zone mb-4 p-4 border-2 border-dashed rounded text-center" style="border-color: #dee2e6; transition: all 0.3s ease;">
		<div class="drop-zone-content">
			<i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
			<h5 class="text-muted">Drag and drop files or folders here to upload</h5>
			<br>
			<button type="button" class="btn btn-link p-0" data-bs-toggle="modal" data-bs-target="#uploadModal">click to browse</button>
		</div>
		<div class="drop-zone-uploading d-none">
			<div class="spinner-border text-primary" role="status">
				<span class="visually-hidden">Uploading...</span>
			</div>
			<h5 class="text-primary mt-3">Uploading files...</h5>
		</div>
	</div>
	<!-- File Browser Table -->
	@BucketBrowserCard(data)
	<!-- Upload Modal -->
	<div class="modal fade" id="uploadModal" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">
						<i class="fas fa-cloud-upload-alt me-2"></i>Upload Files
					</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
				</div>
				<div class="modal-body">
					<form id="uploadForm" enctype="multipart/form-data">
						<div class="mb-3">
							<label for="fileInput" class="form-label">Select Files</label>
							<input type="file" class="form-control" id="fileInput" name="files" multiple webkitdirectory/>
							<div class="form-text">You can select multiple files or folders of any size.</div>
						</div>
						<div class="mb-3">
							<label for="fileInputSingle" class="form-label">Or Select Individual Files</label>
							<input type="file" class="form-control" id="fileInputSingle" name="singleFiles" multiple/>
							<div class="form-text">No file size limits - upload files of any size.</div>
						</div>
						<div id="uploadProgress" class="d-none">
							<div class="progress mb-2">
								<div class="progress-bar" role="progressbar" style="width: 0%"></div>
							</div>
							<small class="text-muted">Uploading...</small>
						</div>
					</form>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-primary" onclick="uploadFiles()">
						<i class="fas fa-upload me-1"></i>Upload
					</button>
				</div>
			</div>
		</div>
	</div>
	<!-- Create Folder Modal -->
	<div class="modal fade" id="createFolderModal" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">
						<i class="fas fa-folder-plus me-2"></i>Create New Folder
					</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
				</div>
				<form hx-post={ fmt.Sprintf("/ui/api/buckets/%s/folders", data.BucketName) } hx-target="body" hx-swap="outerHTML">
					<div class="modal-body">
						<input type="hidden" name="currentPath" value={ data.CurrentPath }/>
						<div class="mb-3">
							<label for="folderName" class="form-label">Folder Name</label>
							<input type="text" class="form-control" id="folderName" name="folderName" required pattern="[a-zA-Z0-9._-]+" placeholder="my-folder"/>
							<div class="form-text">Use only letters, numbers, dots, hyphens, and underscores</div>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
						<button type="submit" class="btn btn-success">
							<i class="fas fa-folder-plus me-1"></i>Create Folder
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
	<div id="bucket-data" data-bucket-name={ data.BucketName } data-current-path={ data.CurrentPath } style="display:none;"></div>
	<script type="text/javascript">
		// Get template data from data attributes
		const bucketDataEl = document.getElementById('bucket-data');
		const bucketData = {
			bucketName: bucketDataEl.getAttribute('data-bucket-name'),
			currentPath: bucketDataEl.getAttribute('data-current-path')
		};

		// Notification function
		function showNotification(message, type = 'info') {
			const alertClass = type === 'success' ? 'alert-success' :
							  type === 'error' ? 'alert-danger' :
							  type === 'warning' ? 'alert-warning' : 'alert-info';

			const notification = document.createElement('div');
			notification.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
			notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
			notification.innerHTML = `
				${message}
				<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
			`;
			document.body.appendChild(notification);

			// Auto-remove after 5 seconds
			setTimeout(() => {
				if (notification.parentNode) {
					notification.remove();
				}
			}, 5000);
		}

		// Utility function to format file sizes
		function formatFileSize(bytes) {
			const unit = 1024;
			if (bytes < unit) return bytes + ' B';
			let div = unit, exp = 0;
			for (let n = bytes / unit; n >= unit; n /= unit) {
				div *= unit;
				exp++;
			}
			return (bytes / div).toFixed(1) + ' ' + 'KMGTPE'[exp] + 'B';
		}

		// Drag and drop functionality
		const dropZone = document.getElementById('dropZone');
		const dropContent = document.querySelector('.drop-zone-content');
		const dropUploading = document.querySelector('.drop-zone-uploading');

		// Prevent default drag behaviors
		['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
			dropZone.addEventListener(eventName, preventDefaults, false);
			document.body.addEventListener(eventName, preventDefaults, false);
		});

		// Highlight drop zone when item is dragged over it
		['dragenter', 'dragover'].forEach(eventName => {
			dropZone.addEventListener(eventName, highlight, false);
		});

		['dragleave', 'drop'].forEach(eventName => {
			dropZone.addEventListener(eventName, unhighlight, false);
		});

		// Handle dropped files
		dropZone.addEventListener('drop', handleDrop, false);

		function preventDefaults(e) {
			e.preventDefault();
			e.stopPropagation();
		}

		function highlight(e) {
			dropZone.style.borderColor = '#007bff';
			dropZone.style.backgroundColor = '#f8f9ff';
		}

		function unhighlight(e) {
			dropZone.style.borderColor = '#dee2e6';
			dropZone.style.backgroundColor = 'transparent';
		}

		function handleDrop(e) {
			const dt = e.dataTransfer;
			const files = dt.files;
			uploadDroppedFiles([...files]);
		}

		function uploadDroppedFiles(files) {
			if (files.length === 0) return;

			dropContent.classList.add('d-none');
			dropUploading.classList.remove('d-none');

			const formData = new FormData();
			formData.append('currentPath', bucketData.currentPath);

			files.forEach(file => {
				formData.append('files', file, file.webkitRelativePath || file.name);
			});

			fetch(`/ui/api/buckets/${bucketData.bucketName}/upload`, {
				method: 'POST',
				body: formData
			})
			.then(response => {
				if (response.ok) {
					showNotification('Files uploaded successfully!', 'success');
					// Use HTMX to refresh the browser content
					htmx.ajax('GET', window.location.pathname + window.location.search, {
						target: '.file-browser-card',
						swap: 'outerHTML',
						headers: {'HX-Request': 'true'}
					});
				} else {
					return response.json().then(data => {
						throw new Error(data.error || 'Upload failed');
					});
				}
			})
			.catch(error => {
				showNotification(error.message, 'error');
			})
			.finally(() => {
				dropContent.classList.remove('d-none');
				dropUploading.classList.add('d-none');
			});
		}

		function uploadFiles() {
			const fileInput = document.getElementById('fileInput');
			const singleFileInput = document.getElementById('fileInputSingle');
			const progressDiv = document.getElementById('uploadProgress');
			const progressBar = progressDiv.querySelector('.progress-bar');

			const files = [...fileInput.files, ...singleFileInput.files];
			if (files.length === 0) {
				showNotification('Please select files to upload', 'warning');
				return;
			}

			progressDiv.classList.remove('d-none');

			const formData = new FormData();
			formData.append('currentPath', bucketData.currentPath);

			files.forEach(file => {
				formData.append('files', file, file.webkitRelativePath || file.name);
			});

			const xhr = new XMLHttpRequest();

			xhr.upload.addEventListener('progress', (e) => {
				if (e.lengthComputable) {
					const percentComplete = (e.loaded / e.total) * 100;
					progressBar.style.width = percentComplete + '%';
				}
			});

			xhr.addEventListener('load', () => {
				if (xhr.status === 200) {
					showNotification('Files uploaded successfully!', 'success');
					bootstrap.Modal.getInstance(document.getElementById('uploadModal')).hide();
					// Use HTMX to refresh the browser content
					htmx.ajax('GET', window.location.pathname + window.location.search, {
						target: '.file-browser-card',
						swap: 'outerHTML',
						headers: {'HX-Request': 'true'}
					});
				} else {
					try {
						const response = JSON.parse(xhr.responseText);
						showNotification(response.error || 'Upload failed', 'error');
					} catch (e) {
						showNotification('Upload failed', 'error');
					}
				}
				progressDiv.classList.add('d-none');
				progressBar.style.width = '0%';
			});

			xhr.addEventListener('error', () => {
				showNotification('Upload failed', 'error');
				progressDiv.classList.add('d-none');
				progressBar.style.width = '0%';
			});

			xhr.open('POST', `/ui/api/buckets/${bucketData.bucketName}/upload`);
			xhr.send(formData);
		}

		// Handle delete button clicks
		document.addEventListener('click', function(e) {
			if (e.target.classList.contains('delete-item-btn') || e.target.closest('.delete-item-btn')) {
				const btn = e.target.classList.contains('delete-item-btn') ? e.target : e.target.closest('.delete-item-btn');
				const name = btn.dataset.name;
				const isDirectory = btn.dataset.isDirectory === 'true';
				const bucketName = btn.dataset.bucket;
				const fullPath = btn.dataset.path;

				const type = isDirectory ? 'folder' : 'file';
				if (confirm(`Are you sure you want to delete this ${type}: ${name}?`)) {
					fetch(`/ui/api/buckets/${bucketName}/delete`, {
						method: 'DELETE',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							path: fullPath,
							isDirectory: isDirectory
						})
					})
					.then(response => {
						if (response.ok) {
							showNotification(`${type.charAt(0).toUpperCase() + type.slice(1)} deleted successfully!`, 'success');
							// Use HTMX to refresh the browser content
							htmx.ajax('GET', window.location.pathname + window.location.search, {
								target: '.file-browser-card',
								swap: 'outerHTML'
							});
						} else {
							return response.json().then(data => {
								throw new Error(data.error || 'Delete failed');
							});
						}
					})
					.catch(error => {
						showNotification(error.message, 'error');
					});
				}
			}
		});
	</script>
}

// BucketBrowserCard renders just the file browser card for HTMX updates
templ BucketBrowserCard(data data.BucketBrowserData) {
	<div class="card file-browser-card">
		<div class="card-header bg-light">
			<div class="row align-items-center">
				<div class="col">
					<h6 class="card-title mb-0">
						<i class="fas fa-folder-open me-2"></i>Contents
						if data.CurrentPath != "" {
							<span class="text-muted">({ data.CurrentPath })</span>
						}
					</h6>
				</div>
				<div class="col-auto">
					<small class="text-muted">{ fmt.Sprintf("%d items", len(data.Items)) }</small>
				</div>
			</div>
		</div>
		<div class="card-body p-0">
			if len(data.Items) == 0 {
				<div class="d-flex align-items-center justify-content-center h-100" style="min-height: 400px;">
					<div class="text-center">
						<i class="fas fa-folder-open fa-3x text-muted mb-3"></i>
						<h5 class="text-muted">This folder is empty</h5>
						<p class="text-muted">Upload files or create folders to get started</p>
					</div>
				</div>
			} else {
				<div class="table-responsive">
					<table class="table table-hover mb-0">
						<thead class="table-light">
							<tr>
								<th scope="col" width="50%">Name</th>
								<th scope="col" width="15%">Type</th>
								<th scope="col" width="15%">Size</th>
								<th scope="col" width="15%">Modified</th>
								<th scope="col" width="5%">Actions</th>
							</tr>
						</thead>
						<tbody>
							<!-- Parent directory link -->
							if data.CurrentPath != "" {
								<tr>
									<td>
										<a href={ templ.URL(fmt.Sprintf("/ui/buckets/%s?path=%s", data.BucketName, path.Dir(data.CurrentPath))) } class="text-decoration-none text-primary">
											<i class="fas fa-level-up-alt me-2"></i>..
										</a>
									</td>
									<td><span class="badge bg-secondary">Directory</span></td>
									<td>-</td>
									<td>-</td>
									<td></td>
								</tr>
							}
							<!-- Directory and file entries -->
							for _, item := range data.Items {
								<tr>
									<td>
										if item.IsDirectory {
											<a href={ templ.URL(fmt.Sprintf("/ui/buckets/%s?path=%s", data.BucketName, path.Join(data.CurrentPath, item.Name))) } class="text-decoration-none text-primary">
												<i class="fas fa-folder me-2 text-warning"></i>{ item.Name }
											</a>
										} else {
											<span>
												<i class="fas fa-file me-2 text-info"></i>{ item.Name }
											</span>
										}
									</td>
									<td>
										if item.IsDirectory {
											<span class="badge bg-warning text-dark">Folder</span>
										} else {
											<span class="badge bg-info">File</span>
										}
									</td>
									<td>
										if item.IsDirectory {
											-
										} else {
											{ formatFileSize(item.Size) }
										}
									</td>
									<td>
										<small class="text-muted">{ item.ModTime.Format("Jan 02, 2006 15:04") }</small>
									</td>
									<td>
										<div class="dropdown">
											<button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
												<i class="fas fa-ellipsis-v"></i>
											</button>
											<ul class="dropdown-menu dropdown-menu-end" style="z-index: 1055;">
												if !item.IsDirectory {
													<li>
														<a class="dropdown-item" href={ templ.URL(fmt.Sprintf("/ui/api/buckets/%s/download?path=%s", data.BucketName, path.Join(data.CurrentPath, item.Name))) } target="_blank">
															<i class="fas fa-download me-2"></i>Download
														</a>
													</li>
													<li><hr class="dropdown-divider"/></li>
												}
												<li>
													<button
														class="dropdown-item text-danger delete-item-btn"
														data-name={ item.Name }
														data-is-directory={ fmt.Sprintf("%t", item.IsDirectory) }
														data-bucket={ data.BucketName }
														data-path={ path.Join(data.CurrentPath, item.Name) }
													>
														<i class="fas fa-trash me-2"></i>Delete
													</button>
												</li>
											</ul>
										</div>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			}
		</div>
	</div>
}

func formatFileSize(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}
